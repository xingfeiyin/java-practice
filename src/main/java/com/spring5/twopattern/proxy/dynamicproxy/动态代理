CGLib和JDK动态代理对比
1、JDK动态代理实现了被代理对象的接口，CGLib代理继承了被代理对象。
2、JDK动态代理和CGLib代理都在运行期生成字节码，JDK动态代理直接写class字节码，
    CGLib代理使用ASM框架写class字节码，CGLib代理实现更复杂，生成代理类比JDK动态代理
    效率低
3、JDK动态代理调用代理方法是通过反射机制调用的，CGLib代理是通过FastClass机制直接调用方法的，
    CGLib代理的执行效率更高。


spring中的代理选择原则
1、当bean有实现接口时，spring就会用JDK动态代理
2、当bean没有实现接口时，spring会使用CGLib代理
3、spring可以通过配置强制使用CGLib代理，只需在spring配置文件中加入代码：
    <aop:aspectj-autoproxy proxy-target-class="true"/>


静态代理和动态代理的本质区别
1、静态代理只能通过手动完成代理操作，如果被代理类增加了新的方法，代理类需要同步增加，
    违背开闭原则。
2、动态代理采用在运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开闭原则。
3、若动态代理要对目标类的增强逻辑进行扩展，结合策略模式，只需要新增策略类便可完成，
    无须修改代理类的代码。

代理模式的优缺点：
优点:
1、代理模式能将代理对象与真实被调用目标对象分离。
2、在一定程度上降低了系统的耦合性，扩展性好。
3、可以起到保护目标对象的作用
4、可以增强目标对象的功能

缺点：
1、代理模式会造成系统设计中类的数量增加。
2、在客户端和目标对象中增加一个代理对象，会导致请求处理速度变慢。
3、增加了系统的复杂度。

